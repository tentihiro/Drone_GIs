package org.geotools;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JFileChooser;

import org.geotools.data.DefaultTransaction;
import org.geotools.data.Transaction;
import org.geotools.data.collection.ListFeatureCollection;
import org.geotools.data.shapefile.ShapefileDataStore;
import org.geotools.data.shapefile.ShapefileDataStoreFactory;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureSource;
import org.geotools.data.simple.SimpleFeatureStore;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.feature.simple.SimpleFeatureTypeBuilder;
import org.geotools.geometry.jts.JTSFactoryFinder;
import org.geotools.referencing.crs.DefaultGeographicCRS;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.Point;
/*
 * Bekommt Dateien und stellt ein neuen Shapefile 
 */
public class DataTransfer {

	static JFileChooser chooser;
	static EnterDataFrame enterData = new EnterDataFrame();
	Quickstart start = new Quickstart();
	final static SimpleFeatureType TYPE = createFeatureType();
	static List<SimpleFeature> features = new ArrayList<SimpleFeature>();
	static GeometryFactory geometryFactory = JTSFactoryFinder
			.getGeometryFactory();
	static SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(TYPE);
/*
 *  Liest in eine FeatureCollection und zeigt Shapefile 
 */
	public void addFeature() throws Exception {
		//bekommt ausgegebene Dateien aus JFrame
		Point point = geometryFactory.createPoint(new Coordinate(enterData
				.getLongitude(), enterData.getLatitude()));// ?

		featureBuilder.add(point);
		featureBuilder.add(enterData.getName());
		featureBuilder.add(enterData.getNumber());
		SimpleFeature feature = featureBuilder.buildFeature(null);
		features.add(feature);

		File newShape = getNewShapeFile();
		ShapefileDataStoreFactory dataStoreFactory = new ShapefileDataStoreFactory();

		Map<String, Serializable> params = new HashMap<String, Serializable>();
		params.put("url", newShape.toURI().toURL());
		params.put("create spatial index", Boolean.TRUE);

		/*
		 * an diese Stelle es gibt java.lang.ClassCastException:
		 * org.geotools.data.directory.DirectoryDataStore cannot be cast to
		 * org.geotools.data.shapefile.ShapefileDataStore at
		 * org.geotools.DataTransfer.addFeature(DataTransfer.java:62) at
		 * org.geotools.EnterDataFrame$1.actionPerformed(EnterDataFrame.java:92)
		 * at javax.swing.AbstractButton.fireActionPerformed(Unknown Source) ...
		 */
		ShapefileDataStore newDataStore = (ShapefileDataStore) dataStoreFactory
				.createNewDataStore(params);

		/*
		 * TYPE is used as a template to describe the file contents
		 */
		newDataStore.createSchema(TYPE);
		/*
		 * Write the features to the shapefile
		 */
		Transaction transaction = new DefaultTransaction("create");

		String typeName = newDataStore.getTypeNames()[0];
		SimpleFeatureSource featureSource = newDataStore
				.getFeatureSource(typeName);
		SimpleFeatureType SHAPE_TYPE = featureSource.getSchema();
		/*
		 * The Shapefile format has a couple limitations: - "the_geom" is always
		 * first, and used for the geometry attribute name - "the_geom" must be
		 * of type Point, MultiPoint, MuiltiLineString, MultiPolygon - Attribute
		 * names are limited in length - Not all data types are supported
		 * (example Timestamp represented as Date)
		 * 
		 * Each data store has different limitations so check the resulting
		 * SimpleFeatureType.
		 */
		System.out.println("SHAPE:" + SHAPE_TYPE);

		if (featureSource instanceof SimpleFeatureStore) {
			SimpleFeatureStore featureStore = (SimpleFeatureStore) featureSource;

			/*
			 * SimpleFeatureStore has a method to add features from a
			 * SimpleFeatureCollection object, so we use the
			 * ListFeatureCollection class to wrap our list of features.
			 */
			SimpleFeatureCollection collection = new ListFeatureCollection(
					TYPE, features);
			featureStore.setTransaction(transaction);
			try {
				featureStore.addFeatures(collection);
				transaction.commit();
			} catch (Exception problem) {
				problem.printStackTrace();
				transaction.rollback();
			}
		} else {
			System.out
					.println(typeName + " does not support read/write access");
			System.exit(1);
		}

		start.openShape(featureSource);
	}

	private static SimpleFeatureType createFeatureType() {

		SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();
		builder.setName("Location");
		builder.setCRS(DefaultGeographicCRS.WGS84); // <- Coordinate reference
													// system

		// add attributes in order
		builder.add("the_geom", Point.class);
		builder.length(15).add("Name", String.class); // <- 15 chars width for
														// name field
		builder.add("number", Integer.class);

		// build the type
		final SimpleFeatureType LOCATION = builder.buildFeatureType();

		return LOCATION;
	}

	private static File getNewShapeFile() {
		chooser = new JFileChooser();
		chooser.setCurrentDirectory(new java.io.File("."));
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		chooser.setAcceptAllFileFilterUsed(false);
		System.out.println("getCurrentDirectory(): "
				+ chooser.getCurrentDirectory());
		File fileToSave = chooser.getCurrentDirectory();
		String path = fileToSave.getAbsolutePath();
		File newFile = new File(path);
		return newFile;
	}
}
